{"ast":null,"code":"import { QuizActionTypes } from \"./quiz-types\";\nimport axios from \"axios\";\nimport { UpdateUser } from \"../user/user-actions\"; //Thunk Actions\n\nexport const createQuiz = data => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/quiz\", data); // dispatch(createQuiz(response.data.user));\n\n        resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n};\nexport const getQuizes = () => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/quiz\");\n        dispatch(setQuizes(response.data.quizes));\n        resolve(true);\n      } catch (error) {\n        resolve(false);\n      }\n    });\n  };\n};\nexport const finishAttempt = data => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/quiz/finishAttempt\", data);\n        dispatch(UpdateUser(response.data.user));\n        resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n}; // export const userSignOut = () => {\n//   return (dispatch) => {\n//     return new Promise(async (resolve) => {\n//       try {\n//         dispatch(SignOutSuccess());\n//         resolve(true);\n//       } catch (error) {\n//         console.log(error);\n//         resolve(false);\n//       }\n//     });\n//   };\n// };\n//Pure Actions\n\nexport const setQuizes = data => ({\n  type: QuizActionTypes.SET_QUIZES,\n  payload: data\n}); // export const addQuestion = (data) => ({\n//   type: QuizActionTypes.ADD_QUESTION,\n//   payload: data,\n// });\n// export const SignOutSuccess = () => ({\n//   type: UserActionTypes.SIGN_OUT_SUCCESS,\n// });","map":{"version":3,"sources":["C:/Users/erbos/OneDrive/Desktop/AM-preventation/client/Am-preventation/src/redux/quiz/quiz-actions.js"],"names":["QuizActionTypes","axios","UpdateUser","createQuiz","data","dispatch","Promise","resolve","response","post","error","console","log","getQuizes","reject","get","setQuizes","quizes","finishAttempt","user","type","SET_QUIZES","payload"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,sBAA3B,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAN,CACrB,gCADqB,EAErBL,IAFqB,CAAvB,CADE,CAKF;;AACAG,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAPD,CAOE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAH,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAZM,CAAP;AAaD,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAMM,SAAS,GAAG,MAAM;AAC7B,SAAQR,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBO,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACc,GAAN,CAAU,gCAAV,CAAvB;AAEAV,QAAAA,QAAQ,CAACW,SAAS,CAACR,QAAQ,CAACJ,IAAT,CAAca,MAAf,CAAV,CAAR;AACAV,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OALD,CAKE,OAAOG,KAAP,EAAc;AACdH,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KATM,CAAP;AAUD,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMW,aAAa,GAAId,IAAD,IAAU;AACrC,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBO,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAN,CACrB,8CADqB,EAErBL,IAFqB,CAAvB;AAKAC,QAAAA,QAAQ,CAACH,UAAU,CAACM,QAAQ,CAACJ,IAAT,CAAce,IAAf,CAAX,CAAR;AAEAZ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OATD,CASE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAH,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAdM,CAAP;AAeD,GAhBD;AAiBD,CAlBM,C,CAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMS,SAAS,GAAIZ,IAAD,KAAW;AAClCgB,EAAAA,IAAI,EAAEpB,eAAe,CAACqB,UADY;AAElCC,EAAAA,OAAO,EAAElB;AAFyB,CAAX,CAAlB,C,CAKP;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { QuizActionTypes } from \"./quiz-types\";\r\nimport axios from \"axios\";\r\nimport { UpdateUser } from \"../user/user-actions\";\r\n//Thunk Actions\r\nexport const createQuiz = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/quiz\",\r\n          data\r\n        );\r\n        // dispatch(createQuiz(response.data.user));\r\n        resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const getQuizes = () => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/quiz\");\r\n\r\n        dispatch(setQuizes(response.data.quizes));\r\n        resolve(true);\r\n      } catch (error) {\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const finishAttempt = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/quiz/finishAttempt\",\r\n          data\r\n        );\r\n\r\n        dispatch(UpdateUser(response.data.user));\r\n\r\n        resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\n// export const userSignOut = () => {\r\n//   return (dispatch) => {\r\n//     return new Promise(async (resolve) => {\r\n//       try {\r\n//         dispatch(SignOutSuccess());\r\n//         resolve(true);\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         resolve(false);\r\n//       }\r\n//     });\r\n//   };\r\n// };\r\n\r\n//Pure Actions\r\nexport const setQuizes = (data) => ({\r\n  type: QuizActionTypes.SET_QUIZES,\r\n  payload: data,\r\n});\r\n\r\n// export const addQuestion = (data) => ({\r\n//   type: QuizActionTypes.ADD_QUESTION,\r\n//   payload: data,\r\n// });\r\n\r\n// export const SignOutSuccess = () => ({\r\n//   type: UserActionTypes.SIGN_OUT_SUCCESS,\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}