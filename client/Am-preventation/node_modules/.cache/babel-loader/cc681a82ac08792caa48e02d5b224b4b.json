{"ast":null,"code":"import { CourseActionTypes } from \"./course-types\";\nimport axios from \"axios\";\nimport { UpdateUser } from \"../user/user-actions\"; //Thunk Actions\n\nexport const getCourses = () => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/course\");\n\n        if (response) {\n          dispatch(setCourses(response.data.courses));\n          resolve(true);\n        }\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n};\nexport const createCourse = data => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/course\", data);\n        if (response) resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n};\nexport const finishCourseAttempt = data => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/course/finishAttempt\", data);\n        dispatch(UpdateUser(response.data.user));\n        if (response) resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n}; //Pure Actions\n\nexport const setCourses = data => ({\n  type: CourseActionTypes.SET_COURSES,\n  payload: data\n});","map":{"version":3,"sources":["C:/Users/erbos/OneDrive/Desktop/AM-preventation/client/Am-preventation/src/redux/course/course-actions.js"],"names":["CourseActionTypes","axios","UpdateUser","getCourses","dispatch","Promise","resolve","response","get","setCourses","data","courses","error","console","log","createCourse","post","finishCourseAttempt","user","type","SET_COURSES","payload"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,sBAA3B,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,kCAAV,CAAvB;;AACA,YAAID,QAAJ,EAAc;AACZH,UAAAA,QAAQ,CAACK,UAAU,CAACF,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAX,CAAR;AACAL,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OAND,CAME,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAXM,CAAP;AAYD,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMS,YAAY,GAAIL,IAAD,IAAU;AACpC,SAAQN,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CACrB,kCADqB,EAErBN,IAFqB,CAAvB;AAIA,YAAIH,QAAJ,EAAcD,OAAO,CAAC,IAAD,CAAP;AACf,OAND,CAME,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAXM,CAAP;AAYD,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMW,mBAAmB,GAAIP,IAAD,IAAU;AAC3C,SAAQN,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CACrB,gDADqB,EAErBN,IAFqB,CAAvB;AAIAN,QAAAA,QAAQ,CAACF,UAAU,CAACK,QAAQ,CAACG,IAAT,CAAcQ,IAAf,CAAX,CAAR;AACA,YAAIX,QAAJ,EAAcD,OAAO,CAAC,IAAD,CAAP;AACf,OAPD,CAOE,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAZM,CAAP;AAaD,GAdD;AAeD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMG,UAAU,GAAIC,IAAD,KAAW;AACnCS,EAAAA,IAAI,EAAEnB,iBAAiB,CAACoB,WADW;AAEnCC,EAAAA,OAAO,EAAEX;AAF0B,CAAX,CAAnB","sourcesContent":["import { CourseActionTypes } from \"./course-types\";\r\nimport axios from \"axios\";\r\nimport { UpdateUser } from \"../user/user-actions\";\r\n\r\n//Thunk Actions\r\nexport const getCourses = () => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/course\");\r\n        if (response) {\r\n          dispatch(setCourses(response.data.courses));\r\n          resolve(true);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const createCourse = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/course\",\r\n          data\r\n        );\r\n        if (response) resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const finishCourseAttempt = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/course/finishAttempt\",\r\n          data\r\n        );\r\n        dispatch(UpdateUser(response.data.user));\r\n        if (response) resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\n//Pure Actions\r\nexport const setCourses = (data) => ({\r\n  type: CourseActionTypes.SET_COURSES,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}