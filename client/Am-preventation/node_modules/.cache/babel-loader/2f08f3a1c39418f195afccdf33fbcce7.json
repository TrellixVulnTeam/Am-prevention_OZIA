{"ast":null,"code":"import { UserActionTypes } from \"./user-types\";\nimport axios from \"axios\"; //Thunk Actions\n\nexport const userSignUp = data => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/users/register\", data);\n        dispatch(SignUpSuccess(response.data.user));\n        resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n};\nexport const userSignIn = data => {\n  return dispatch => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/users/signin\", data);\n        dispatch(SignInSuccess(response.data.user));\n        resolve(true);\n      } catch (error) {\n        resolve(false);\n        alert(\"Invalid Username or Password, Please try again!\");\n      }\n    });\n  };\n};\nexport const userSignOut = () => {\n  return dispatch => {\n    return new Promise(async resolve => {\n      try {\n        dispatch(SignOutSuccess());\n        resolve(true);\n      } catch (error) {\n        console.log(error);\n        resolve(false);\n      }\n    });\n  };\n}; //Pure Actions\n\nexport const SignUpSuccess = data => ({\n  type: UserActionTypes.SIGN_UP_SUCCESS,\n  payload: data\n});\n_c = SignUpSuccess;\nexport const SignInSuccess = data => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: data\n});\n_c2 = SignInSuccess;\nexport const SignOutSuccess = () => ({\n  type: UserActionTypes.SIGN_OUT_SUCCESS\n});\n_c3 = SignOutSuccess;\nexport const UpdateUser = data => ({\n  type: UserActionTypes.UPDATE_USER,\n  payload: data\n});\n_c4 = UpdateUser;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SignUpSuccess\");\n$RefreshReg$(_c2, \"SignInSuccess\");\n$RefreshReg$(_c3, \"SignOutSuccess\");\n$RefreshReg$(_c4, \"UpdateUser\");","map":{"version":3,"sources":["C:/Users/erbos/OneDrive/Desktop/AM-preventation/client/Am-preventation/src/redux/user/user-actions.js"],"names":["UserActionTypes","axios","userSignUp","data","dispatch","Promise","resolve","response","post","SignUpSuccess","user","error","console","log","userSignIn","reject","SignInSuccess","alert","userSignOut","SignOutSuccess","type","SIGN_UP_SUCCESS","payload","SIGN_IN_SUCCESS","SIGN_OUT_SUCCESS","UpdateUser","UPDATE_USER"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,0CADqB,EAErBL,IAFqB,CAAvB;AAIAC,QAAAA,QAAQ,CAACK,aAAa,CAACF,QAAQ,CAACJ,IAAT,CAAcO,IAAf,CAAd,CAAR;AACAJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAPD,CAOE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAZM,CAAP;AAaD,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAMQ,UAAU,GAAIX,IAAD,IAAU;AAClC,SAAQC,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBS,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMR,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CACrB,wCADqB,EAErBL,IAFqB,CAAvB;AAKAC,QAAAA,QAAQ,CAACY,aAAa,CAACT,QAAQ,CAACJ,IAAT,CAAcO,IAAf,CAAd,CAAR;AACAJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OARD,CAQE,OAAOK,KAAP,EAAc;AACdL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAW,QAAAA,KAAK,CAAC,iDAAD,CAAL;AACD;AACF,KAbM,CAAP;AAcD,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAQd,QAAD,IAAc;AACnB,WAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AACpC,UAAI;AACFF,QAAAA,QAAQ,CAACe,cAAc,EAAf,CAAR;AACAb,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAHD,CAGE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KARM,CAAP;AASD,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMG,aAAa,GAAIN,IAAD,KAAW;AACtCiB,EAAAA,IAAI,EAAEpB,eAAe,CAACqB,eADgB;AAEtCC,EAAAA,OAAO,EAAEnB;AAF6B,CAAX,CAAtB;KAAMM,a;AAKb,OAAO,MAAMO,aAAa,GAAIb,IAAD,KAAW;AACtCiB,EAAAA,IAAI,EAAEpB,eAAe,CAACuB,eADgB;AAEtCD,EAAAA,OAAO,EAAEnB;AAF6B,CAAX,CAAtB;MAAMa,a;AAKb,OAAO,MAAMG,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAEpB,eAAe,CAACwB;AADa,CAAP,CAAvB;MAAML,c;AAIb,OAAO,MAAMM,UAAU,GAAItB,IAAD,KAAW;AACnCiB,EAAAA,IAAI,EAAEpB,eAAe,CAAC0B,WADa;AAEnCJ,EAAAA,OAAO,EAAEnB;AAF0B,CAAX,CAAnB;MAAMsB,U","sourcesContent":["import { UserActionTypes } from \"./user-types\";\r\nimport axios from \"axios\";\r\n\r\n//Thunk Actions\r\nexport const userSignUp = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/users/register\",\r\n          data\r\n        );\r\n        dispatch(SignUpSuccess(response.data.user));\r\n        resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const userSignIn = (data) => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:5000/api/users/signin\",\r\n          data\r\n        );\r\n\r\n        dispatch(SignInSuccess(response.data.user));\r\n        resolve(true);\r\n      } catch (error) {\r\n        resolve(false);\r\n        alert(\"Invalid Username or Password, Please try again!\");\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const userSignOut = () => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve) => {\r\n      try {\r\n        dispatch(SignOutSuccess());\r\n        resolve(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        resolve(false);\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\n//Pure Actions\r\nexport const SignUpSuccess = (data) => ({\r\n  type: UserActionTypes.SIGN_UP_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const SignInSuccess = (data) => ({\r\n  type: UserActionTypes.SIGN_IN_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const SignOutSuccess = () => ({\r\n  type: UserActionTypes.SIGN_OUT_SUCCESS,\r\n});\r\n\r\nexport const UpdateUser = (data) => ({\r\n  type: UserActionTypes.UPDATE_USER,\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}